IOC(inversion of control) - аутсорсинг создания и управления обьектами.
        Т.е. передача программистом
        прав на создание и управление обьектами Spring
DI (dependency injection) - аутсоринг добавления/внедрения зависимостей.
    DI - делает обьекты нашего прилождения слабо зависимыми друг от друга.
________________________________________________________________________________________________________________________
                   Конфигурация Spring Container-a с помощью XML
                Bean Scope
Scope(область видимости) определяется
 -жизненый цикл бина
 -возможное кол-во создаваемых бинов

    Разновидности bean scope:
singletone, prototype | Для WEB:  request, session, global-session

singletone - дефолтный scope.
    -такой бин создается сразу после прочтения Spring Conteinera конфиг файла.
    -является общим для всех кто запросит его у Spring Conteiner-a/
    -подходит для stateless обьектов.

prototype
    -такой бин создается только после обращения к Spring Conteiner с помощью
    метода getBean.
    -для каждого такого обращения создается новый бин в Spring Conteiner.
    -подходит для Stateful обьектов.
------------------------------------------------------------------------------------------------------------------------
                Методы init и destroy
-У данных методов access modifier может быть любым
-У данных методов return type может быть любым. Но из-за того, что возвращаемое значене мы никак не можум использовать,
    чаще всего retun type - это void
-называться методы могут быть как угодно
-в данных методах недолжно быть параметров

    Если у бина scope = prototype, то:
-init-method будет вызываться для каждого новосозданного бина.
-для этого бина destroy-method вызываться не будет
-необходимо самостоятельно писать код для закрытия\очвобождения ресурсов, которые были использованы в бине.
________________________________________________________________________________________________________________________

                            Конфигурация с помощью аннотаций
-Если к аннотации @Component не прописывать bean id, то бину будет назначени дефолтный id.
    Дефолтный bean id получается из имени класса, заменяя его первую заглавную букву на прописну.
_________________________________________________
-Для внедрения зависимостей с помощью аннотаций используется аннотация @Autowired
-Типы autowiring-a или где мы можем использовать данный DI:
    -конструктор
    -Сеттер
    -Поле
Процесс внедрения зависимостей при использовании @Autowired такой:
1.Сканирование пакета, поиск классов с аннотацией @Component
2.При наличие аннотации @Autowired начинается поиск подходящий по типу бина
    Далее ситуация развивается по одному из сценариев:
        -Если находится один подходящий бин, происходит внедрение зависимостей;
        -Если подходящих по типу бинов нет, то выбрасывается исключение;
        -Если подходящих по типу бинов больше одного, тоже выбрасывается исключение.
_________________________________________________
Если при использовании @Autowired подходящих по типу бинов больше одного, то выбрасывается исключение.
Предотвратить выброс данного исключения можно конкретно указав, какой бин должен быть внедрен.
Для этого и используют аннотацию @Qualifier
_________________________________________________
Для внедрения строк и других значений можно использовать аннотацию @Value
В этом случае в сеттерах нет необходимости, как это было при конфигурации с помощью XML файла
_________________________________________________
@Scope("prototype") - перед классом
для активации нужен javax.annotation-api-1.3.2.jar
 @PostCotruct -перед init() методом
 @PreDestroy - перед destroy() методом
________________________________________________________________________________________________________________________
                Конфигурация Spring Container-a с помощью Java кода
Аннотация @Configuration озночает, что данный класс является конфигурацией.
С помощью аннотации @ComponentScan мы показываем, какой пакет нужно сканировать на наличие бинов и разных аннотаций

Без аннотации @ComponentScan:
    -Данный способ не использует сканирование пакета и поиск бинов. Здесь бины описываются в конфиг классе.
    -Данный способ ге использует аннотацию @Autowired. Здесь зависимости прописываются вручную.
    -Название метода - это bean id.
    -Аннотации @Bean перехватывает все обращения к бину и регулирует егосоздание.





