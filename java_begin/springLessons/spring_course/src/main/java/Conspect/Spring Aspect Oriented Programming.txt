AOP - парадигма программирования , основанная  на идее разделения основного и служебного функционала.
    Служебный функционал записывается в Aspect-класса.
В основе Aspect заключена сквозая логика (cross-cutting logic).

К сквозному фунционалу относят:
    -Логирование
    -Проверка прав(Security check)
    -Обработка транзакций
    -Обработка исключений
    -Кэширование
    -И т.д.

Плюсы AOP:
-Сквозной функцонал сосредоточен в 1-м или нескольких обособленных классах. Это позволяет легче его применть
-Становится легче добовлять новые сквозные работы для наше основного кода или имеющиеся сквозные работы для новых
классов. Это достигается благодоря конфигурации аспектов.
-Бизнес-код приложения избавляется от скозного кода, становится меньше и чище. Работать с ним становится легче.

Минусы AOP:
-Дополнительное время на работу аспектов.

AOP frameworks: Spring AOP, AspectJ
________________________________________________________________________________________________________________________

@EnableAspectJAutoProxy позволяет нам за кулисами использовать Spring AOP Proxy

@Aspect говорит о том , что это не простой класс, а Aspect. Поэтому к данному классу Spring будет относиться по другому.
Аспект-это класс, отвечающий за сквозную функциональность.
________________________________________________________________________________________________________________________
Advice - метод, который находится в Aspect-e и содержит сквозную логику. Advice определяет, что и когда должно происходить.
        в идеале Advice должен быть небольшим и быстро работающим.

        Advice типы
Before - выполняется до метода с основной логикой
After returning - выполняется только после нормального окончания метода с основной логикой
After throwing - выполняется после окончания метода с основной логикой только, если было выброшено исключение
Ather\ Ather finalyy - выполняется после окончания методов с основной логикой
Around - выполняется до и после метода с основной логикой
________________________________________________________________________________________________________________________
Pointcut - выражение, описывающее где должен быть применен Advice.

Spring AOP использует AspectJ Poincut expression language. Т.е. определённые правила в написании выражений для создания
        Pointcut.
Шаблон написания
    execution(modifiers-pattern? return-type-pattern declaring-type-pattern?
                method-name-pattern(parameters-pattern) throws-pattern?)

Для того чтобы не пользоваться copy-paste когда несколько Advice-ов подходит один и тот же Pointcut, есть возможность
обьявить данный Pointcut и затем использовать его несколько раз.
    @Piontcut("pointcut_expression")
    private void piontcut_reference(){}

    @Before("pointcut_reference()")
    public void advice_name(){ some code }

    Плюсы обьявления Pointcut:
-Возможность использование созданного Piontcut для множества Advice-ов
-Возмоожность быстрого изменения Pointcut expression для множества Advice-ов
-Возможность комбинирования Piontcut-ов

Комбинирование Pointcut-ов - это их обьединение с помощью логических операторов &&(и) ||(или) !(не)
